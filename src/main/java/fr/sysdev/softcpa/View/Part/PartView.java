/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fr.sysdev.softcpa.View.Part;

import fr.sysdev.softcpa.constants.FR.*;
import fr.sysdev.softcpa.entity.Part;
import fr.sysdev.softcpa.entity.Provider;
import fr.sysdev.softcpa.utils.predicates.PartsPredicates;
import fr.sysdev.softcpa.utils.ui.IconHeaderRenderer;
import fr.sysdev.softcpa.utils.ui.TextAndIcon;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

import javax.swing.JTextField;
import javax.swing.Timer;

import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import lombok.extern.slf4j.Slf4j;

import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JTable;
import javax.swing.UIManager;

/**
 *
 * @author COPCGRE
 */
@Slf4j
@Component
@Scope
public class PartView extends javax.swing.JInternalFrame implements ActionListener {

//    @Autowired
    private List<Part> parts;

    private List<Part> allParts;
    List<Provider> providers;
    private Part part;

    private String csvFile;
    private TableRowSorter<TableModel> sorter;

    public Timer t;
    private int partsNumberAdded;
    public int CountPartsToAdd;
    private List<Integer> sortOrderList;

    public PartView(List<Part> parts, List<Provider> providers) {
        
        this.partsNumberAdded = 0;
        part = new Part();
        this.parts = new ArrayList<>(parts);
        this.allParts = parts;
        this.providers = new ArrayList<>(providers);
        this.sortOrderList = new ArrayList<>();
        
        initComponents();

        prepareForm();
        t = new Timer(1000, this);

        resetInterface();

    }

    /**
     * Creates new form PieceViews
     */
    public PartView() {
        this.partsNumberAdded = 0;

        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jButton_Update = new javax.swing.JButton();
        jButton_Remove = new javax.swing.JButton();
        jButton_Add = new javax.swing.JButton();
        jButton_Cancel = new javax.swing.JButton();
        jTextField_Part_PurchasingPrice = new javax.swing.JTextField();
        jLabel_Part_PurchasingPrice = new javax.swing.JLabel();
        jTextField_Part_SellingPrice = new javax.swing.JTextField();
        jLabel_Part_SellingPrice = new javax.swing.JLabel();
        jTextField_Part_Brand = new javax.swing.JTextField();
        jLabel_Part_Brand = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea_Part_Designation = new javax.swing.JTextArea();
        jLabel_Part_Designation = new javax.swing.JLabel();
        jLabel_Part_Stock = new javax.swing.JLabel();
        jTextField_Part_Stock = new javax.swing.JTextField();
        jLabel_Part_Reference = new javax.swing.JLabel();
        jTextField_Part_Reference = new javax.swing.JTextField();
        jLabel_Part_EanCode = new javax.swing.JLabel();
        jTextField_Part_EanCode = new javax.swing.JTextField();
        jTextField_Part_Id = new javax.swing.JTextField();
        jLabel_Part_Id = new javax.swing.JLabel();
        jLabel_Part_Provider = new javax.swing.JLabel();
        jComboBox_Part_Provider = new javax.swing.JComboBox<>();
        jTextField_Part_ProfessionalSellingPrice = new javax.swing.JTextField();
        jLabel_Part_ProfessionalSellingPrice = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jTextField_Part_Search = new javax.swing.JTextField();
        jButton_Refresh = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable_Part = new javax.swing.JTable();
        jLabel_Part_Search = new javax.swing.JLabel();
        jLabel_Part_Count = new javax.swing.JLabel();
        jButton_Part_Open_Csv = new javax.swing.JButton();
        jComboBox_Part_ProviderToImport = new javax.swing.JComboBox<>();
        jButton_Part_Import = new javax.swing.JButton();
        jTextField_Part_CsvFilePath = new javax.swing.JTextField();
        jButton_Invoicing = new javax.swing.JButton();
        jProgressBar_Part_Importing = new javax.swing.JProgressBar();

        jTextField5.setText("jTextField5");

        jTextField6.setText("jTextField6");

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Stock");
        setFocusTraversalPolicyProvider(true);
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/008-warehouse.png"))); // NOI18N
        setPreferredSize(new java.awt.Dimension(1280, 527));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel1.setMaximumSize(new java.awt.Dimension(500, 419));
        jPanel1.setPreferredSize(new java.awt.Dimension(350, 419));

        jButton_Update.setText("Modify");
        jButton_Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_UpdateActionPerformed(evt);
            }
        });

        jButton_Remove.setText("Remove");
        jButton_Remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_RemoveActionPerformed(evt);
            }
        });

        jButton_Add.setText("Add");
        jButton_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_AddActionPerformed(evt);
            }
        });

        jButton_Cancel.setText("Cancel");
        jButton_Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_CancelActionPerformed(evt);
            }
        });

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTable_Part, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.purchasingPrice}"), jTextField_Part_PurchasingPrice, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jLabel_Part_PurchasingPrice.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel_Part_PurchasingPrice.setText("jLabel1");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTable_Part, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.sellingPrice}"), jTextField_Part_SellingPrice, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jLabel_Part_SellingPrice.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel_Part_SellingPrice.setText("jLabel1");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTable_Part, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.brand}"), jTextField_Part_Brand, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jLabel_Part_Brand.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel_Part_Brand.setText("jLabel1");

        jTextArea_Part_Designation.setColumns(20);
        jTextArea_Part_Designation.setRows(5);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTable_Part, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.designation}"), jTextArea_Part_Designation, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jTextArea_Part_Designation.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextArea_Part_DesignationKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTextArea_Part_Designation);

        jLabel_Part_Designation.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel_Part_Designation.setText("jLabel1");

        jLabel_Part_Stock.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel_Part_Stock.setText("jLabel1");

        jTextField_Part_Stock.setNextFocusableComponent(jTextArea_Part_Designation);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTable_Part, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.stock}"), jTextField_Part_Stock, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jLabel_Part_Reference.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel_Part_Reference.setText("jLabel1");

        jTextField_Part_Reference.setNextFocusableComponent(jLabel_Part_Stock);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTable_Part, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.reference}"), jTextField_Part_Reference, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jTextField_Part_Reference.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_Part_ReferenceActionPerformed(evt);
            }
        });

        jLabel_Part_EanCode.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel_Part_EanCode.setText("jLabel1");

        jTextField_Part_EanCode.setNextFocusableComponent(jLabel_Part_Stock);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTable_Part, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.eanCode}"), jTextField_Part_EanCode, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jTextField_Part_EanCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_Part_EanCodeActionPerformed(evt);
            }
        });

        jTextField_Part_Id.setEditable(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTable_Part, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.id}"), jTextField_Part_Id, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jTextField_Part_Id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_Part_IdActionPerformed(evt);
            }
        });

        jLabel_Part_Id.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel_Part_Id.setText("jLabel1");

        jLabel_Part_Provider.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel_Part_Provider.setText("jLabel1");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTable_Part, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.professionalSellingPrice}"), jTextField_Part_ProfessionalSellingPrice, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jLabel_Part_ProfessionalSellingPrice.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel_Part_ProfessionalSellingPrice.setText("jLabel1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel_Part_Reference)
                    .addComponent(jLabel_Part_ProfessionalSellingPrice)
                    .addComponent(jLabel_Part_Brand)
                    .addComponent(jLabel_Part_SellingPrice)
                    .addComponent(jLabel_Part_PurchasingPrice)
                    .addComponent(jLabel_Part_Designation)
                    .addComponent(jLabel_Part_EanCode)
                    .addComponent(jLabel_Part_Id)
                    .addComponent(jLabel_Part_Stock))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField_Part_Reference)
                    .addComponent(jTextField_Part_Stock)
                    .addComponent(jTextField_Part_SellingPrice)
                    .addComponent(jTextField_Part_PurchasingPrice)
                    .addComponent(jTextField_Part_ProfessionalSellingPrice)
                    .addComponent(jScrollPane1)
                    .addComponent(jTextField_Part_Brand)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextField_Part_Id, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel_Part_Provider)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox_Part_Provider, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jTextField_Part_EanCode)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton_Update, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton_Cancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton_Add, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton_Remove, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17)))
                .addGap(0, 0, 0))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField_Part_Id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Part_Id)
                    .addComponent(jLabel_Part_Provider)
                    .addComponent(jComboBox_Part_Provider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField_Part_EanCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Part_EanCode))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField_Part_Reference, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Part_Reference))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_Part_Stock)
                    .addComponent(jTextField_Part_Stock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel_Part_Designation)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField_Part_Brand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Part_Brand))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField_Part_SellingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Part_SellingPrice))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField_Part_ProfessionalSellingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Part_ProfessionalSellingPrice))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField_Part_PurchasingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Part_PurchasingPrice))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_Update)
                    .addComponent(jButton_Remove))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_Cancel)
                    .addComponent(jButton_Add))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(jPanel1);

        jPanel2.setMaximumSize(new java.awt.Dimension(946, 502));
        jPanel2.setMinimumSize(new java.awt.Dimension(600, 502));

        jTextField_Part_Search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField_Part_SearchKeyReleased(evt);
            }
        });

        jButton_Refresh.setText("jButton1");
        jButton_Refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_RefreshActionPerformed(evt);
            }
        });

        jTable_Part.setAutoCreateRowSorter(true);
        jTable_Part.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7", "Title 8", "Title 9"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${parts}");
        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, jTable_Part);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${id}"));
        columnBinding.setColumnName("Id");
        columnBinding.setColumnClass(Long.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${eanCode}"));
        columnBinding.setColumnName("Ean Code");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${reference}"));
        columnBinding.setColumnName("Reference");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${designation}"));
        columnBinding.setColumnName("Designation");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${brand}"));
        columnBinding.setColumnName("Brand");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${provider}"));
        columnBinding.setColumnName("Provider");
        columnBinding.setColumnClass(fr.sysdev.softcpa.entity.Provider.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${purchasingPrice}"));
        columnBinding.setColumnName("Purchasing Price");
        columnBinding.setColumnClass(Double.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${stock}"));
        columnBinding.setColumnName("Stock");
        columnBinding.setColumnClass(Integer.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${sellingPrice}"));
        columnBinding.setColumnName("Selling Price");
        columnBinding.setColumnClass(Double.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${professionalSellingPrice}"));
        columnBinding.setColumnName("Professional Selling Price");
        columnBinding.setColumnClass(Double.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jTable_Part.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_PartMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable_Part);

        jLabel_Part_Search.setText("jLabel1");

        jLabel_Part_Count.setText("jLabel1");

        jButton_Part_Open_Csv.setText("open csv");
        jButton_Part_Open_Csv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Part_Open_CsvActionPerformed(evt);
            }
        });

        jComboBox_Part_ProviderToImport.setEnabled(false);

        jButton_Part_Import.setText("Import");
        jButton_Part_Import.setEnabled(false);
        jButton_Part_Import.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Part_ImportActionPerformed(evt);
            }
        });

        jTextField_Part_CsvFilePath.setEnabled(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${csvFile}"), jTextField_Part_CsvFilePath, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jButton_Invoicing.setText("Invoicing");
        jButton_Invoicing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_InvoicingActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton_Invoicing, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBox_Part_ProviderToImport, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jTextField_Part_CsvFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_Part_Open_Csv, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jProgressBar_Part_Importing, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_Part_Import, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(392, 392, 392))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jLabel_Part_Search)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField_Part_Search, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel_Part_Count)
                        .addGap(18, 18, 18)
                        .addComponent(jButton_Refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 926, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField_Part_Search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Part_Search)
                    .addComponent(jButton_Refresh)
                    .addComponent(jLabel_Part_Count))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_Part_Open_Csv)
                    .addComponent(jTextField_Part_CsvFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox_Part_ProviderToImport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_Invoicing))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton_Part_Import)
                    .addComponent(jProgressBar_Part_Importing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52))
        );

        jSplitPane1.setRightComponent(jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField_Part_EanCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_Part_EanCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_Part_EanCodeActionPerformed

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        //pieceController.getView().setTitle("toDel");
        //System.out.println(""+pieceController.getView().getTitle());
    }//GEN-LAST:event_formInternalFrameClosed

    private void jButton_UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_UpdateActionPerformed


    }//GEN-LAST:event_jButton_UpdateActionPerformed

    private void jTextField_Part_IdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_Part_IdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_Part_IdActionPerformed

    private void jButton_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_AddActionPerformed
        //updateInterface();  
        resetInterface();
    }//GEN-LAST:event_jButton_AddActionPerformed

    private void jButton_CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_CancelActionPerformed
        resetInterface();
    }//GEN-LAST:event_jButton_CancelActionPerformed

    private void jTextArea_Part_DesignationKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea_Part_DesignationKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_TAB) {
            System.out.println(evt.getModifiers());
            if (evt.getModifiers() > 0) {
                jTextField_Part_Stock.requestFocus();
            } else {
                jTextField_Part_Brand.requestFocus();
            }
            evt.consume();
        }
    }//GEN-LAST:event_jTextArea_Part_DesignationKeyPressed

    private void jTextField_Part_ReferenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_Part_ReferenceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_Part_ReferenceActionPerformed

    private void jButton_Part_Open_CsvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Part_Open_CsvActionPerformed
        getCsvFilePath();
        jButton_Part_Import.setEnabled(true);
        jButton_Part_Import.setVisible(true);
        jProgressBar_Part_Importing.setVisible(true);
        jComboBox_Part_ProviderToImport.setEnabled(true);
    }//GEN-LAST:event_jButton_Part_Open_CsvActionPerformed

    private void jButton_Part_ImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Part_ImportActionPerformed
        t.start();
        jButton_Part_Import.setEnabled(false);
    }//GEN-LAST:event_jButton_Part_ImportActionPerformed

    private void jTable_PartMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_PartMouseClicked
        getPartFromSelectedTableRow();
        jComboBox_Part_Provider.setSelectedItem(part.getProvider().getName());
        jTable_Part.setSelectionBackground(Color.blue);
        jTable_Part.setSelectionForeground(Color.white);
        if (evt.getClickCount() == 2) {

        } else {
            updateInterface();
        }
    }//GEN-LAST:event_jTable_PartMouseClicked

    private void jTextField_Part_SearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField_Part_SearchKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
            parts.clear();
            parts.addAll(allParts);
            bindingPartTable();
            search();
        }
        search();
    }//GEN-LAST:event_jTextField_Part_SearchKeyReleased

    private void jButton_InvoicingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_InvoicingActionPerformed


    }//GEN-LAST:event_jButton_InvoicingActionPerformed

    private void jButton_RemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_RemoveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton_RemoveActionPerformed

    private void jButton_RefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_RefreshActionPerformed

    }//GEN-LAST:event_jButton_RefreshActionPerformed

    public void getCsvFilePath() throws HeadlessException {
        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        jfc.setDialogTitle(Constants.Labels.SELECT_A_FILE);
        jfc.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter(Constants.Labels.CSV_FILE, "csv");
        jfc.addChoosableFileFilter(filter);

        int returnValue = jfc.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            System.out.println(jfc.getSelectedFile().getPath());
            this.setCsvFile(jfc.getSelectedFile().getPath());
            jTextField_Part_CsvFilePath.setText(csvFile);
        } else {
            System.out.println("No Selection ");
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_Add;
    private javax.swing.JButton jButton_Cancel;
    private javax.swing.JButton jButton_Invoicing;
    private javax.swing.JButton jButton_Part_Import;
    private javax.swing.JButton jButton_Part_Open_Csv;
    private javax.swing.JButton jButton_Refresh;
    private javax.swing.JButton jButton_Remove;
    private javax.swing.JButton jButton_Update;
    private javax.swing.JComboBox<String> jComboBox_Part_Provider;
    private javax.swing.JComboBox<String> jComboBox_Part_ProviderToImport;
    private javax.swing.JLabel jLabel_Part_Brand;
    private javax.swing.JLabel jLabel_Part_Count;
    private javax.swing.JLabel jLabel_Part_Designation;
    private javax.swing.JLabel jLabel_Part_EanCode;
    private javax.swing.JLabel jLabel_Part_Id;
    private javax.swing.JLabel jLabel_Part_ProfessionalSellingPrice;
    private javax.swing.JLabel jLabel_Part_Provider;
    private javax.swing.JLabel jLabel_Part_PurchasingPrice;
    private javax.swing.JLabel jLabel_Part_Reference;
    private javax.swing.JLabel jLabel_Part_Search;
    private javax.swing.JLabel jLabel_Part_SellingPrice;
    private javax.swing.JLabel jLabel_Part_Stock;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JProgressBar jProgressBar_Part_Importing;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTable jTable_Part;
    private javax.swing.JTextArea jTextArea_Part_Designation;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField_Part_Brand;
    private javax.swing.JTextField jTextField_Part_CsvFilePath;
    private javax.swing.JTextField jTextField_Part_EanCode;
    private javax.swing.JTextField jTextField_Part_Id;
    private javax.swing.JTextField jTextField_Part_ProfessionalSellingPrice;
    private javax.swing.JTextField jTextField_Part_PurchasingPrice;
    private javax.swing.JTextField jTextField_Part_Reference;
    private javax.swing.JTextField jTextField_Part_Search;
    private javax.swing.JTextField jTextField_Part_SellingPrice;
    private javax.swing.JTextField jTextField_Part_Stock;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    private void prepareForm() {
        this.setTitle(Constants.JFrameTitles.STOCK);
        loadProviders();
        jButton_Part_Import.setVisible(false);
        jProgressBar_Part_Importing.setVisible(false);
        
        if (providers.isEmpty()) {
            jComboBox_Part_ProviderToImport.setVisible(false);
            
        } else {
            jComboBox_Part_ProviderToImport.setVisible(true);
        }

        jLabel_Part_Count.setText(parts.size() + " " + Constants.Labels.PARTS);

        jLabel_Part_Id.setText(Constants.Labels.PART_ID);
        jLabel_Part_EanCode.setText(Constants.Labels.EAN_CODE);
        jLabel_Part_Reference.setText(Constants.Labels.REF);
        jLabel_Part_Designation.setText(Constants.Labels.DESIGNATION);
        jLabel_Part_Brand.setText(Constants.Labels.BRAND);

        jLabel_Part_PurchasingPrice.setText(Constants.Labels.PUR_PRICE);
        jLabel_Part_SellingPrice.setText(Constants.Labels.SELLING_PRICE);
        jLabel_Part_ProfessionalSellingPrice.setText(Constants.Labels.PRO_SELLING_PRICE);
        jLabel_Part_Stock.setText(Constants.Labels.STOCK);

        jLabel_Part_Search.setText(Constants.Labels.SEARCH);
        jLabel_Part_Provider.setText(Constants.Labels.PROVIDER);
        jButton_Add.setText(Constants.Labels.ADD_BTN);
        jButton_Remove.setText(Constants.Labels.REMOVE_BTN);
        jButton_Update.setText(Constants.Labels.UPDATE_BTN);

        bindingPartTable();
        jTable_Part.getTableHeader().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int col = jTable_Part.columnAtPoint(e.getPoint());
                String name = jTable_Part.getColumnName(col);

                System.out.println("Column index selected " + col + " " + name);
            }
        });

    }

    public Part getPart() {
        return part;
    }

    public void setPart(Part part) {
        this.part = part;
    }

    public JButton getRemoveBtn() {
        return jButton_Remove;
    }

    public JButton getAddBtn() {
        return jButton_Add;
    }

    public JButton getUpdateBtn() {
        return jButton_Update;
    }

    public JButton getInvoicingBtn() {
        return jButton_Invoicing;
    }

    public JButton getImportBtn() {
        return jButton_Part_Import;
    }

    public JTextField getSearchJTF() {

        return jTextField_Part_Search;
    }

    public void removePart() {

        getPartFromSelectedTableRow();
        int indexInAllParts = allParts.indexOf(findPartById(parts, part.getId()));
        int indexInParts = parts.indexOf(findPartById(parts, part.getId()));
        allParts.remove(indexInAllParts);
        //parts.remove(indexInParts);
        bindingPartTable();
        resetInterface();

    }

    public void addPart(Long key) {
        jTextField_Part_Id.setText(key.toString());
        setPartFromForm();
        parts.add(part);
        allParts.add(part);
        bindingPartTable();

        resetInterface();
    }

    public void updatePart() {
        int row = jTable_Part.getSelectedRow();
        int rowt = jTable_Part.getRowSorter().convertRowIndexToModel(row);
        getPartFromSelectedTableRow();
        int indexInAllParts = allParts.indexOf(findPartById(parts, part.getId()));
        bindingPartTable();
        
        
        jTable_Part.setRowSelectionInterval(rowt, rowt);
        getPartFromSelectedTableRow();
        int indexInParts = parts.indexOf(findPartById(parts, part.getId()));
        allParts.set(indexInAllParts, part);
        parts.set(indexInParts, part);
        search();
    }

    public void getPartsToInvoice() {

    }

    private void bindingPartTable() {
        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${parts}");
        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, jTable_Part);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${id}"));
        columnBinding.setColumnName(Constants.Labels.PART_ID);
        columnBinding.setColumnClass(Long.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${eanCode}"));
        columnBinding.setColumnName(Constants.Labels.EAN_CODE);
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${reference}"));
        columnBinding.setColumnName(Constants.Labels.REF);
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${designation}"));
        columnBinding.setColumnName(Constants.Labels.DESIGNATION);
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${brand}"));
        columnBinding.setColumnName(Constants.Labels.BRAND);
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${provider}"));
        columnBinding.setColumnName(Constants.Labels.PROVIDER);
        columnBinding.setColumnClass(fr.sysdev.softcpa.entity.Provider.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${purchasingPrice}"));
        columnBinding.setColumnName(Constants.Labels.PUR_PRICE_HEADER);
        columnBinding.setColumnClass(Double.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${stock}"));
        columnBinding.setColumnName(Constants.Labels.STOCK);
        columnBinding.setColumnClass(Integer.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${sellingPrice}"));
        columnBinding.setColumnName(Constants.Labels.SELLING_PRICE_HEADER);
        columnBinding.setColumnClass(Double.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${professionalSellingPrice}"));
        columnBinding.setColumnName(Constants.Labels.PRO_SELLING_PRICE_HEADER);
        columnBinding.setColumnClass(Double.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();

        TableColumnModel cm = jTable_Part.getColumnModel();
        cm.getColumn(0).setPreferredWidth(25);
        cm.getColumn(1).setPreferredWidth(50);
        cm.getColumn(2).setPreferredWidth(50);
        cm.getColumn(3).setPreferredWidth(250);
        cm.getColumn(4).setPreferredWidth(40);
        cm.getColumn(5).setPreferredWidth(80);
        cm.getColumn(6).setPreferredWidth(40);
        cm.getColumn(7).setPreferredWidth(40);
        cm.getColumn(8).setPreferredWidth(40);
        cm.getColumn(9).setPreferredWidth(40);

        cm.getColumn(6).setCellRenderer(new PriceCellRender());
        cm.getColumn(8).setCellRenderer(new PriceCellRender());
        cm.getColumn(9).setCellRenderer(new PriceCellRender());

        cm.getColumn(7).setCellRenderer(new StockCellRender());
        cm.getColumn(5).setCellRenderer(new ProviderCellRender());

        intSortOrderList(cm);

        disableDefaultJtableSorting(jTable_Part);

        jTable_Part.getTableHeader().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int col = jTable_Part.columnAtPoint(e.getPoint());
                String name = jTable_Part.getColumnName(col);
                resetHeaders(sortOrderList, jTable_Part);
                System.out.println("Column index selected " + col + " " + name);
                System.out.println("avant " +sortOrderList);
                changeSortOrder(col);
                System.out.println("apres " +sortOrderList);
                chooseColoumnsSort(col);
                System.out.println("apres le tri " +sortOrderList);
                displaySortOrderIcon(jTable_Part, sortOrderList);
                System.out.println("apres l'affichage " +sortOrderList);
                
            }

        });

    }

    private void resetInterface() {

        searchInterface();

        jTextField_Part_Search.setText("");
        displayPartsCount();

        jButton_Add.setVisible(true);
        jButton_Cancel.setVisible(true);
        jButton_Remove.setVisible(false);
        jButton_Update.setVisible(false);
    }

    public void displayPartsCount() {
        if (parts.size() > 0) {
            if (parts.size() == 1) {
                jLabel_Part_Count.setText(Constants.Labels.ONE_PART);
            } else {
                jLabel_Part_Count.setText(parts.size() + " " + Constants.Labels.PARTS);
            }
        } else {
            jLabel_Part_Count.setText("");
        }
    }

    private void searchInterface() {
        jTable_Part.clearSelection();
        jTextField_Part_Id.setText("");
        jTextField_Part_EanCode.setText("");
        jTextField_Part_Reference.setText("");
        jTextArea_Part_Designation.setText("");
        jTextField_Part_Brand.setText("");
        jTextField_Part_PurchasingPrice.setText("");
        jTextField_Part_Stock.setText("");
        jTextField_Part_SellingPrice.setText("");
        jTextField_Part_ProfessionalSellingPrice.setText("");
        jButton_Add.setVisible(true);
        jButton_Remove.setVisible(false);
        jButton_Update.setVisible(false);
        jButton_Cancel.setVisible(true);
        jButton_Cancel.setText(Constants.Labels.CANCEL_BTN);

    }

    private void updateInterface() {

        jButton_Add.setVisible(false);
        jButton_Remove.setVisible(true);
        jButton_Update.setVisible(true);
        jButton_Cancel.setVisible(true);
        jButton_Cancel.setText(Constants.Labels.CREATE);
    }

    private void setPartFromForm() {
        part = new Part();
        part.setId(new Long(jTextField_Part_Id.getText()));
        part.setEanCode(jTextField_Part_EanCode.getText());
        part.setReference(jTextField_Part_Reference.getText().toUpperCase());
        part.setDesignation(jTextArea_Part_Designation.getText().toUpperCase());
        part.setBrand(jTextField_Part_Brand.getText().toUpperCase());
        part.setPurchasingPrice(new Double(jTextField_Part_PurchasingPrice.getText()));
        part.setSellingPrice(new Double(jTextField_Part_SellingPrice.getText()));
        part.setProfessionalSellingPrice(new Double(jTextField_Part_ProfessionalSellingPrice.getText()));
        Provider provider = findProviderByName(providers, (String) jComboBox_Part_Provider.getSelectedItem());
        provider.addPart(part);
        part.setProvider(provider);

    }

    public String getCsvFile() {
        return csvFile;
    }

    public void setCsvFile(String csvFile) {
        this.csvFile = csvFile;
    }

    private Part getPartFromSelectedTableRow() {
        part = new Part();
        int row = jTable_Part.getSelectedRow();
        int rowt = jTable_Part.getRowSorter().convertRowIndexToModel(row);
        Long id = (Long) (jTable_Part.getModel().getValueAt(rowt, 0));
        part.setId(id);
        String eancode = (String) (jTable_Part.getModel().getValueAt(rowt, 1));
        part.setEanCode(eancode);

        String reference = (String) (jTable_Part.getModel().getValueAt(rowt, 2));
        part.setReference(reference);
        String designation = (String) (jTable_Part.getModel().getValueAt(rowt, 3));
        part.setDesignation(designation);
        String brand = (String) (jTable_Part.getModel().getValueAt(rowt, 4));
        part.setBrand(brand);
        Provider provider = (Provider) (jTable_Part.getModel().getValueAt(rowt, 5));
        part.setProvider(provider);
        int stock = (int) (jTable_Part.getModel().getValueAt(rowt, 7));
        part.setStock(stock);
        Double sp = (Double) (jTable_Part.getModel().getValueAt(rowt, 8));
        part.setSellingPrice(sp);
        Double pp = (Double) (jTable_Part.getModel().getValueAt(rowt, 6));
        part.setPurchasingPrice(pp);

        Double psp = (Double) (jTable_Part.getModel().getValueAt(rowt, 9));
        part.setProfessionalSellingPrice(psp);

        return part;
    }

    private void search() {

        String s = jTextField_Part_Search.getText().toUpperCase();

        if (s.equals("")) {
            parts.clear();
            parts.addAll(allParts);
            bindingPartTable();
            searchInterface();
        } else {
            List<Part> filter = PartsPredicates.filterParts(allParts, PartsPredicates.refOrEanOrDesignationOrBrandContains(s));
            parts.clear();
            parts.addAll(filter);

            if (parts.size() > 0) {

                updateInterface();
                bindingPartTable();
                jTable_Part.setRowSelectionInterval(0, 0);
                jTable_Part.setSelectionBackground(Color.blue);
                jTable_Part.setSelectionForeground(Color.red);

            } else {

                parts.clear();
                bindingPartTable();
                searchInterface();

            }

        }

        displayPartsCount();
    }

    public static List<Part> removingDuplicatesAndSortPartList(List<Part> ListeAvecDoublons) {
        Set set = new HashSet();
        set.addAll(ListeAvecDoublons);
        List<Part> res = new ArrayList(set);
        Collections.sort(res, (Part p2, Part p1) -> p2.getId().compareTo(p1.getId()));
        return res;
    }

    public Part findPartById(List<Part> partsList, Long id) {
        Part result = null;
        Optional<Part> partOptional = partsList.stream().filter((t) -> {
            return t.getId().equals(id);
        }).findAny();
        if (partOptional.isPresent()) {
            result = partOptional.get();
        }

        return result;
    }

    public Provider findProviderByName(List<Provider> providersList, String name) {
        Provider result = null;
        Optional<Provider> providerOptional = providersList.stream().filter((p) -> {
            return p.getName().equals(name);
        }).findAny();
        if (providerOptional.isPresent()) {
            result = providerOptional.get();
        }

        return result;
    }

    public JButton getRefreshBtn() {

        return jButton_Refresh;
    }

    public void loadParts() {
        int selectedRow = getPartRow();
        allParts = parts;
        prepareForm();
        if( selectedRow>-1)
        selectPartRow(selectedRow);
        
    }

    public void setProviders(List<Provider> providers) {
        this.providers = providers;
    }

    public Provider getProviderToImport() {
        Provider provider = findProviderByName(providers, (String) jComboBox_Part_ProviderToImport.getSelectedItem());
        return provider;
    }

    public void importRaport(LocalDateTime start, LocalDateTime finish, int count, long days, long hours, long minutes, long seconds) {
        JOptionPane.showMessageDialog(null, start + "\n" + finish + "\n count: " + count + "\n" + days + " days"
                + "\n" + hours + " hours" + "\n" + minutes + " minutes" + "\n" + seconds + " seconds"
        );
        java.awt.Toolkit.getDefaultToolkit().beep();
        jProgressBar_Part_Importing.setValue(0);
    }

    public void displayProgress(int i, int count) {

        if (count > 0) {

            partsNumberAdded = partsNumberAdded + 1305;
            i = partsNumberAdded;
            jProgressBar_Part_Importing.setValue(i * 100 / count);
            jProgressBar_Part_Importing.setToolTipText(i * 100 / count + "% Done");
            System.out.println("index " + i + " count " + count);
            if (i >= count) {
                //JOptionPane.showMessageDialog(null,"fini"); 

                t.stop();
                jButton_Part_Import.setEnabled(true);
                jProgressBar_Part_Importing.setValue(0);
            }
        }
    }

    @Override
    public void actionPerformed(ActionEvent ae) {

        displayProgress(partsNumberAdded, CountPartsToAdd);
    }

    public int getPartsNumberAdded() {
        return partsNumberAdded;
    }

    public void setPartsNumberAdded(int partsNumberAdded) {
        this.partsNumberAdded = partsNumberAdded;
    }

    public List<Part> getParts() {
        return parts;
    }

    public void setParts(List<Part> parts) {
        this.parts = parts;
    }

    public int getCountPartsToAdd() {
        return CountPartsToAdd;
    }

    public void setCountPartsToAdd(int CountPartsToAdd) {
        this.CountPartsToAdd = CountPartsToAdd;
    }

    public void loadProviders() {
        jComboBox_Part_Provider.removeAllItems();
        jComboBox_Part_ProviderToImport.removeAllItems();
        providers.forEach(p -> jComboBox_Part_Provider.addItem(p.getName()));
        providers.forEach(p -> jComboBox_Part_ProviderToImport.addItem(p.getName()));
    }

    public void intSortOrderList(TableColumnModel cm) {
        int i = 0;
        while (sortOrderList.size() != cm.getColumnCount() && i < cm.getColumnCount()) {
            sortOrderList.add(0);
            i++;
        }
    }

    public void disableDefaultJtableSorting(JTable table) {
        TableModel model = table.getModel();
        TableColumnModel colModel = table.getColumnModel();
        sorter = new TableRowSorter<>(model);

        for (int i = 0; i < colModel.getColumnCount(); i++) {
            sorter.setSortable(i, false);
        }
        table.setRowSorter(sorter);
    }

    public  void changeSortOrder(int col) {
        int so = sortOrderList.get(col);

        for (int i = 0; i < sortOrderList.size(); i++) {
            sortOrderList.set(i, 0);
        }

        switch (so) {
            case 0:
                sortOrderList.set(col, 1);
                break;
            case 1:
                sortOrderList.set(col, 2);
                break;
            case 2:
                sortOrderList.set(col, 1);
                break;
            default:
                sortOrderList.set(col, 0);
                break;
        }
   
    }

    public void chooseColoumnsSort(int col) {
        switch (col) {
            case 0:
                if (sortOrderList.get(col) == 1) {
                    PartsPredicates.sortPartsById(parts);
                } else if (sortOrderList.get(col) == 2) {
                    PartsPredicates.sortReversePartsById(parts);
                }
                break;
            case 1:
                if (sortOrderList.get(col) == 1) {
                    PartsPredicates.sortPartsByEanCode(parts);
                } else if (sortOrderList.get(col) == 2) {
                    PartsPredicates.sortReversePartsByEanCode(parts);
                }
                break;

            case 2:
                if (sortOrderList.get(col) == 1) {
                    PartsPredicates.sortPartsByRef(parts);
                } else if (sortOrderList.get(col) == 2) {
                    PartsPredicates.sortReversePartsByRef(parts);
                }
                break;
            case 3:
                if (sortOrderList.get(col) == 1) {
                    PartsPredicates.sortPartsByDesignation(parts);
                } else if (sortOrderList.get(col) == 2) {
                    PartsPredicates.sortReversePartsByDesignation(parts);
                }
                break;
            case 4:
                if (sortOrderList.get(col) == 1) {
                    PartsPredicates.sortPartsByBrand(parts);
                } else if (sortOrderList.get(col) == 2) {
                    PartsPredicates.sortReversePartsByBrand(parts);
                }
                break;
            case 5:
                if (sortOrderList.get(col) == 1) {
                    PartsPredicates.sortPartsByProvider(parts);
                } else if (sortOrderList.get(col) == 2) {
                    PartsPredicates.sortReversePartsByProvider(parts);
                }
                break;

            case 6:
                if (sortOrderList.get(col) == 1) {
                    PartsPredicates.sortPartsByPurPrice(parts);
                } else if (sortOrderList.get(col) == 2) {
                    PartsPredicates.sortReversePartsByPurPrice(parts);
                }
                break;

            case 7:
                if (sortOrderList.get(col) == 1) {
                    PartsPredicates.sortPartsByStock(parts);
                } else if (sortOrderList.get(col) == 2) {
                    PartsPredicates.sortReversePartsByStock(parts);
                }
                break;

            case 8:
                if (sortOrderList.get(col) == 1) {
                    PartsPredicates.sortPartsByIndivPrice(parts);
                } else if (sortOrderList.get(col) == 2) {
                    PartsPredicates.sortReversePartsByIndivPrice(parts);
                }
                break;

            case 9:
                if (sortOrderList.get(col) == 1) {
                    PartsPredicates.sortPartsByProPrice(parts);
                } else if (sortOrderList.get(col) == 2) {
                    PartsPredicates.sortReversePartsByProPrice(parts);
                }
                break;
            default:
                PartsPredicates.sortPartsById(parts);
                break;
        }
    }

    public void displaySortOrderIcon(JTable table, List<Integer> list) {
         
        resetHeaders(list, table);
        
         list.forEach(so -> {
           
          
            if (so != 0){
             switch (so) {
                 case 2:
                     table.getTableHeader().getColumnModel().getColumn(list.indexOf(so)).setHeaderRenderer(new IconHeaderRenderer());
                     table.getColumnModel().getColumn(list.indexOf(so)).setHeaderValue(new TextAndIcon(table.getColumnName(list.indexOf(so)), UIManager.getIcon("Table.ascendingSortIcon")));
                     break;
                 case 1:
                     table.getTableHeader().getColumnModel().getColumn(list.indexOf(so)).setHeaderRenderer(new IconHeaderRenderer());
                     table.getColumnModel().getColumn(list.indexOf(so)).setHeaderValue(new TextAndIcon(table.getColumnName(list.indexOf(so)), UIManager.getIcon("Table.descendingSortIcon")));
                     break;
                 default:
                     table.getTableHeader().getColumnModel().getColumn(list.indexOf(so)).setHeaderRenderer(new IconHeaderRenderer());
                     table.getColumnModel().getColumn(list.indexOf(so)).setHeaderValue(new TextAndIcon(table.getColumnName(list.indexOf(so)), null));
                     break;}
             }
            });

        

    }

    public void resetHeaders(List<Integer> list, JTable table) {
        list.forEach(so -> {
            table.getTableHeader().getColumnModel().getColumn(list.indexOf(so)).setHeaderRenderer(new IconHeaderRenderer());
            table.getColumnModel().getColumn(list.indexOf(so)).setHeaderValue(new TextAndIcon(table.getColumnName(list.indexOf(so)), null));});
    }
    private int getPartRow() {
        int rowt =-1;
        if(jTable_Part.getSelectedRowCount()>0)
        {int row = jTable_Part.getSelectedRow();
            rowt = jTable_Part.getRowSorter().convertRowIndexToModel(row);
        }
        return rowt;
    }

    private void selectPartRow(int rowt) {
            if(rowt>-1){
            jTable_Part.setRowSelectionInterval(rowt, rowt);
            jTable_Part.setSelectionBackground(Color.blue);
            jTable_Part.setSelectionForeground(Color.white);}
        
    }
}
