/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fr.sysdev.softcpa.View.Invoicing;

import fr.sysdev.softcpa.View.Invoice.InvoiceDetailsView;
import fr.sysdev.softcpa.constants.FR.*;
import fr.sysdev.softcpa.entity.Client;
import fr.sysdev.softcpa.entity.ClientStatusEnum;
import fr.sysdev.softcpa.entity.Invoice;
import fr.sysdev.softcpa.entity.InvoiceLine;
import fr.sysdev.softcpa.entity.InvoiceStatusEnum;
import fr.sysdev.softcpa.entity.Part;
import fr.sysdev.softcpa.entity.Payment;
import fr.sysdev.softcpa.entity.Vehicle;
import fr.sysdev.softcpa.utils.predicates.PartsPredicates;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.HeadlessException;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.beans.PropertyVetoException;
import java.time.LocalDate;
import java.time.Period;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.border.Border;
import javax.swing.border.MatteBorder;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import org.springframework.stereotype.Component;

/**
 *
 * @author f
 */
@Component
public class InvoicingView extends javax.swing.JInternalFrame {

    /**
     * Creates new form invoicingView
     */
    private List<Client> clients;
    private Client client;
    private List<Part> parts;
    private List<InvoiceLine> selectedInvoiceLines = new ArrayList<>();
    private List<InvoiceLine> selectedProInvoiceLines = new ArrayList<>();

    private List<InvoiceLine> invoiceLines = new ArrayList<>();
    private Client seller;
    private ArrayList<String> clientsNamesList;
    private DefaultListModel dlm;

    //facturation
    private Invoice invoice;
    private long invoiceKey;
    private Vehicle vehicle;

    //Saving parts
    private List<Part> partsToSave = new ArrayList<>();

    String details = "";
    private ClientStatusEnum clientStatus = ClientStatusEnum.INDIVIDUAL;

    private int choice = -1;
    final static boolean MANUAL = false;
    final static boolean AUTO = true;
    private boolean MOD;

    public InvoicingView() {

        this.MOD = MANUAL;
        this.setTitle(Constants.Labels.INVOICING);
        initComponents();
    }

    public InvoicingView(List<Client> clients, List<Part> parts) {

        this.MOD = MANUAL;
        this.setTitle(Constants.Labels.INVOICING);
        this.clients = clients;
        this.parts = parts;
        initComponents();
        prepareForm();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        priceConvertor2 = new fr.sysdev.softcpa.utils.Converter.PriceConvertor();
        jComboBox_Client = new javax.swing.JComboBox<>();
        jTextField_Search_Part = new javax.swing.JTextField();
        jButton_Refresh = new javax.swing.JButton();
        jLabel_Search_Part = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel_Invoicing_Search_Result = new javax.swing.JPanel();
        jPanel_Invoicing_Client = new javax.swing.JPanel();
        jLabel_Client_Id = new javax.swing.JLabel();
        jLabel_Client_Id_Value = new javax.swing.JLabel();
        jLabel_Client_Status = new javax.swing.JLabel();
        jLabel_Client_Name = new javax.swing.JLabel();
        jLabel_Client_Name_Value = new javax.swing.JLabel();
        jLabel_Client_Surname = new javax.swing.JLabel();
        jLabel_Client_Surname_Value = new javax.swing.JLabel();
        jLabel_Client_Email = new javax.swing.JLabel();
        jLabel_Client_Email_Value = new javax.swing.JLabel();
        jLabel_Client_PhoneNumber_Value = new javax.swing.JLabel();
        jLabel_Client_PhoneNumber = new javax.swing.JLabel();
        jLabel_Address_HouseNumber = new javax.swing.JLabel();
        jLabel_Address_HouseNumber_Value = new javax.swing.JLabel();
        jLabel_Address_Street_Value = new javax.swing.JLabel();
        jLabel_Address_Street = new javax.swing.JLabel();
        jLabel_Address_PostCode = new javax.swing.JLabel();
        jLabel_Address_PostCode_Value = new javax.swing.JLabel();
        jLabel_Address_City_Value = new javax.swing.JLabel();
        jLabel_Address_City = new javax.swing.JLabel();
        jLabel_Client_Status_Value = new javax.swing.JLabel();
        jPanel_Invoicing_Company = new javax.swing.JPanel();
        jLabel_Client_CompanyID_Value = new javax.swing.JLabel();
        jLabel_Client_CompanyID = new javax.swing.JLabel();
        jLabel_Client_CompanyName = new javax.swing.JLabel();
        jLabel_Client_CompanyName_Value = new javax.swing.JLabel();
        jTextField_Invoicing_Numberplate = new javax.swing.JTextField();
        jLabel_Invoicing_Numberplate = new javax.swing.JLabel();
        jTextField_Invoicing_Vehicle_Type = new javax.swing.JTextField();
        jLabel_Invoicing_Vehicle_Type = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel_Invoice_Lines = new javax.swing.JPanel();
        jLabel_Amount = new javax.swing.JLabel();
        jLabel_Amount_Value = new javax.swing.JLabel();
        jLabel_SelectionCount = new javax.swing.JLabel();
        jLabel_SelectionCount_Value = new javax.swing.JLabel();
        jButton_Validate = new javax.swing.JButton();
        jToggleButton_Auto = new javax.swing.JToggleButton();
        jButton_Save_Prices = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/009-dollar.png"))); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jComboBox_Client.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox_Client.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox_ClientItemStateChanged(evt);
            }
        });

        jTextField_Search_Part.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField_Search_PartKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField_Search_PartKeyReleased(evt);
            }
        });

        jButton_Refresh.setText("jButton1");
        jButton_Refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_RefreshActionPerformed(evt);
            }
        });

        jLabel_Search_Part.setText("jLabel1");

        jPanel_Invoicing_Search_Result.setLayout(new java.awt.GridLayout(50, 0));
        jScrollPane2.setViewportView(jPanel_Invoicing_Search_Result);

        jPanel_Invoicing_Client.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel_Invoicing_Client.setPreferredSize(new java.awt.Dimension(294, 288));

        jLabel_Client_Id.setText("jLabel1");
        jLabel_Client_Id.setPreferredSize(new java.awt.Dimension(34, 20));

        jLabel_Client_Id_Value.setPreferredSize(new java.awt.Dimension(150, 14));

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${client.id}"), jLabel_Client_Id_Value, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jLabel_Client_Status.setText("jLabel1");
        jLabel_Client_Status.setPreferredSize(new java.awt.Dimension(34, 20));

        jLabel_Client_Name.setText("jLabel1");
        jLabel_Client_Name.setPreferredSize(new java.awt.Dimension(34, 20));

        jLabel_Client_Name_Value.setPreferredSize(new java.awt.Dimension(150, 14));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${client.name}"), jLabel_Client_Name_Value, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jLabel_Client_Surname.setText("jLabel1");
        jLabel_Client_Surname.setPreferredSize(new java.awt.Dimension(34, 20));

        jLabel_Client_Surname_Value.setPreferredSize(new java.awt.Dimension(150, 14));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${client.surname}"), jLabel_Client_Surname_Value, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jLabel_Client_Email.setText("jLabel1");
        jLabel_Client_Email.setPreferredSize(new java.awt.Dimension(34, 20));

        jLabel_Client_Email_Value.setPreferredSize(new java.awt.Dimension(150, 14));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${client.email}"), jLabel_Client_Email_Value, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jLabel_Client_PhoneNumber_Value.setPreferredSize(new java.awt.Dimension(150, 14));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${client.phoneNumber}"), jLabel_Client_PhoneNumber_Value, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jLabel_Client_PhoneNumber.setText("jLabel1");
        jLabel_Client_PhoneNumber.setPreferredSize(new java.awt.Dimension(34, 20));

        jLabel_Address_HouseNumber.setText("jLabel1");
        jLabel_Address_HouseNumber.setPreferredSize(new java.awt.Dimension(34, 20));

        jLabel_Address_HouseNumber_Value.setPreferredSize(new java.awt.Dimension(150, 14));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${client.address.houseNumber}"), jLabel_Address_HouseNumber_Value, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jLabel_Address_Street_Value.setPreferredSize(new java.awt.Dimension(150, 14));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${client.address.street}"), jLabel_Address_Street_Value, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jLabel_Address_Street.setText("jLabel1");
        jLabel_Address_Street.setPreferredSize(new java.awt.Dimension(34, 20));

        jLabel_Address_PostCode.setText("jLabel1");
        jLabel_Address_PostCode.setPreferredSize(new java.awt.Dimension(34, 20));

        jLabel_Address_PostCode_Value.setPreferredSize(new java.awt.Dimension(150, 14));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${client.address.postCode}"), jLabel_Address_PostCode_Value, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jLabel_Address_City_Value.setPreferredSize(new java.awt.Dimension(150, 14));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${client.address.city}"), jLabel_Address_City_Value, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jLabel_Address_City.setText("jLabel1");
        jLabel_Address_City.setPreferredSize(new java.awt.Dimension(34, 20));

        jLabel_Client_Status_Value.setPreferredSize(new java.awt.Dimension(150, 14));

        javax.swing.GroupLayout jPanel_Invoicing_ClientLayout = new javax.swing.GroupLayout(jPanel_Invoicing_Client);
        jPanel_Invoicing_Client.setLayout(jPanel_Invoicing_ClientLayout);
        jPanel_Invoicing_ClientLayout.setHorizontalGroup(
            jPanel_Invoicing_ClientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_Invoicing_ClientLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_Invoicing_ClientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel_Client_Id, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                    .addComponent(jLabel_Client_Status, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel_Client_Name, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel_Client_Surname, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel_Client_Email, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel_Client_PhoneNumber, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel_Address_HouseNumber, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel_Address_Street, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel_Address_PostCode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel_Address_City, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel_Invoicing_ClientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel_Client_Status_Value, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel_Client_Name_Value, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel_Client_Surname_Value, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel_Client_Email_Value, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel_Client_PhoneNumber_Value, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Address_PostCode_Value, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel_Address_HouseNumber_Value, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel_Address_Street_Value, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel_Address_City_Value, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel_Client_Id_Value, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel_Invoicing_ClientLayout.setVerticalGroup(
            jPanel_Invoicing_ClientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_Invoicing_ClientLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_Invoicing_ClientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_Client_Id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Client_Id_Value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_Invoicing_ClientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_Client_Status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Client_Status_Value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel_Invoicing_ClientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_Client_Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Client_Name_Value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_Invoicing_ClientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_Client_Surname, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Client_Surname_Value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel_Invoicing_ClientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_Client_Email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Client_Email_Value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_Invoicing_ClientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_Client_PhoneNumber_Value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Client_PhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(jPanel_Invoicing_ClientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_Address_HouseNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Address_Street_Value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_Invoicing_ClientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_Address_Street, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Address_HouseNumber_Value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_Invoicing_ClientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_Address_PostCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Address_PostCode_Value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel_Invoicing_ClientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_Address_City, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Address_City_Value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel_Invoicing_Company.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${client.company.cin}"), jLabel_Client_CompanyID_Value, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jLabel_Client_CompanyID.setText("jLabel1");
        jLabel_Client_CompanyID.setPreferredSize(new java.awt.Dimension(34, 20));

        jLabel_Client_CompanyName.setText("jLabel1");
        jLabel_Client_CompanyName.setPreferredSize(new java.awt.Dimension(34, 20));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${client.company.name}"), jLabel_Client_CompanyName_Value, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout jPanel_Invoicing_CompanyLayout = new javax.swing.GroupLayout(jPanel_Invoicing_Company);
        jPanel_Invoicing_Company.setLayout(jPanel_Invoicing_CompanyLayout);
        jPanel_Invoicing_CompanyLayout.setHorizontalGroup(
            jPanel_Invoicing_CompanyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_Invoicing_CompanyLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_Invoicing_CompanyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_Invoicing_CompanyLayout.createSequentialGroup()
                        .addComponent(jLabel_Client_CompanyName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel_Client_CompanyName_Value))
                    .addGroup(jPanel_Invoicing_CompanyLayout.createSequentialGroup()
                        .addComponent(jLabel_Client_CompanyID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel_Client_CompanyID_Value)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel_Invoicing_CompanyLayout.setVerticalGroup(
            jPanel_Invoicing_CompanyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_Invoicing_CompanyLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_Invoicing_CompanyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_Client_CompanyName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Client_CompanyName_Value))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_Invoicing_CompanyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel_Client_CompanyID_Value, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Client_CompanyID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jLabel_Invoicing_Numberplate.setText("jLabel1");

        jLabel_Invoicing_Vehicle_Type.setText("jLabel1");

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel_Invoice_Lines.setLayout(new java.awt.GridLayout(50, 0, 0, 5));
        jScrollPane1.setViewportView(jPanel_Invoice_Lines);

        jLabel_Amount.setText("jLabel1");

        jLabel_SelectionCount.setText("jLabel3");

        jButton_Validate.setText("jButton2");
        jButton_Validate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ValidateActionPerformed(evt);
            }
        });

        jToggleButton_Auto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Icons16X16/scan-barcode-with-scanner-tool.png"))); // NOI18N
        jToggleButton_Auto.setActionCommand("Auto");

        jButton_Save_Prices.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Icons16X16/006-save.png"))); // NOI18N
        jButton_Save_Prices.setText("jButton2");
        jButton_Save_Prices.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Save_PricesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBox_Client, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel_Invoicing_Company, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel_Invoicing_Client, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel_Invoicing_Vehicle_Type)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jTextField_Invoicing_Vehicle_Type, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel_Search_Part)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jTextField_Search_Part, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel_Invoicing_Numberplate)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jTextField_Invoicing_Numberplate, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton_Refresh, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jToggleButton_Auto)
                                .addGap(10, 10, 10))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel_Amount)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel_Amount_Value)
                                .addGap(56, 56, 56)
                                .addComponent(jLabel_SelectionCount)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel_SelectionCount_Value)
                                .addGap(189, 189, 189))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButton_Validate)
                                .addGap(18, 18, 18)
                                .addComponent(jButton_Save_Prices)
                                .addGap(81, 81, 81))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox_Client, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField_Invoicing_Numberplate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Invoicing_Numberplate)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel_Invoicing_Vehicle_Type)
                            .addComponent(jTextField_Invoicing_Vehicle_Type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel_Search_Part)
                            .addComponent(jTextField_Search_Part, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton_Refresh)
                            .addComponent(jToggleButton_Auto))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel_Invoicing_Client, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel_Invoicing_Company, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_Amount)
                    .addComponent(jLabel_Amount_Value)
                    .addComponent(jLabel_SelectionCount)
                    .addComponent(jLabel_SelectionCount_Value))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_Validate)
                    .addComponent(jButton_Save_Prices))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox_ClientItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox_ClientItemStateChanged

        if (evt.getStateChange() == ItemEvent.SELECTED) {
            Object item = evt.getItem();
            Optional<Client> clientOptional = clients.stream().filter((t) -> {
                return item.toString().equals(t.getName() + " " + t.getSurname());
            }).findAny();

            if (clientOptional.isPresent()) {

                client = clientOptional.get();
                //* hard binding of the jlabel contaning status
                jLabel_Client_Status_Value.setText(client.getClientStatus().getName());
                //////////////////////////////////////////////////////

                if (clientStatusHasChanged()) {
                    clientStatus = client.getClientStatus();
                    updateInvoiceSelectedLines(client.getClientStatus());
                }
                if (client.getClientStatus() == ClientStatusEnum.INDIVIDUAL) {
                    showClientPanel();
                    hideCompanyPanel();
                } else {
                    showClientPanel();
                    showCompanyPanel();
                }

            } else {
                hideClientPanel();
                hideCompanyPanel();

            }
        }
        redrawSelectedInvoiceLinesPanel();

    }//GEN-LAST:event_jComboBox_ClientItemStateChanged

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened

        prepareForm();

    }//GEN-LAST:event_formInternalFrameOpened

    private void jButton_RefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_RefreshActionPerformed
        prepareForm();
    }//GEN-LAST:event_jButton_RefreshActionPerformed

    private void jTextField_Search_PartKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField_Search_PartKeyReleased
        int code = evt.getKeyCode();
        int modifiers = evt.getModifiers();
        if (code == evt.VK_CONTROL) {

        } else {
            search();
        }

    }//GEN-LAST:event_jTextField_Search_PartKeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton_ValidateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ValidateActionPerformed


    }//GEN-LAST:event_jButton_ValidateActionPerformed

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        this.resetView();
    }//GEN-LAST:event_formInternalFrameClosing

    private void jTextField_Search_PartKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField_Search_PartKeyPressed


    }//GEN-LAST:event_jTextField_Search_PartKeyPressed

    private void jButton_Save_PricesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Save_PricesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton_Save_PricesActionPerformed

    public void displayInvoice() {
        try {
            displayInvoice(invoice);
        } catch (PropertyVetoException ex) {
            Logger.getLogger(InvoicingView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void calculDate() {
        LocalDate locald = LocalDate.now();
        LocalDate bd = LocalDate.of(2019, 04, 23);
        LocalDate bd2 = LocalDate.of(1982, 01, 18);
        Period p = Period.between(bd2, bd);
        System.out.printf("age %d ans et %d mois et %d jours", p.getYears(), p.getMonths(), p.getDays());
    }

    public void createInvoice() {

        getVehicleFromForm();
        updateInvoiceSelectedLinesPrices(selectedInvoiceLines, jPanel_Invoice_Lines);
        getInvoiceFromForm(invoiceKey, amount(20.0), client, selectedInvoiceLines, vehicle);

    }

    public void getVehicleFromForm() {
        String vehicleType = jTextField_Invoicing_Vehicle_Type.getText();
        String platenumber = jTextField_Invoicing_Numberplate.getText();
        vehicle = new Vehicle(vehicleType, platenumber);
    }

    public void actionChooser() throws HeadlessException {

        if (isValidform()) {
            Object[] buttons = {
                Constants.Labels.INVOICE,
                Constants.Labels.CREDIT_NOTE,
                Constants.Labels.DELIVERY_FORM,
                Constants.Labels.QUIT
            };
            choice = JOptionPane.showOptionDialog(null, "Question ?", Constants.Labels.CONFIRMATION,
                    JOptionPane.WARNING_MESSAGE, 0, null, buttons, buttons[2]);

        } else if (!isSelectedClient()) {
            JOptionPane.showMessageDialog(this, Constants.Messages.SELECT_CLIENT);
        } else {
            JOptionPane.showMessageDialog(this, Constants.Messages.SELECT_PARTS);
        }

    }

    public void getInvoiceFromForm(Long key, Double amount, Client client, List<InvoiceLine> ils, Vehicle vehicle) {

        invoice = new Invoice();
        invoice.setClient(client);
        invoice.setId(key);
        LocalDate locald = LocalDate.now();
        invoice.setInvoiceDate(locald);
        invoice.setAmount(amount);

        invoice.setInvoiceStatus(InvoiceStatusEnum.UNPAID);
        invoice.setVehicleType(vehicle.getVehicleType());
        invoice.setPlatenumber(vehicle.getPlatenumber());
        invoice.setInvoiceNumber(Constants.Labels.INVOICE_PREFIX + locald.getDayOfMonth() + locald.getMonthValue() + locald.getYear() + '-' + key);

        List<InvoiceLine> lines = new ArrayList<>();
        ils.forEach((InvoiceLine il) -> {
            InvoiceLine line = new InvoiceLine();
            line = il;
            line.setInvoice(invoice);
            lines.add(line);
        });
        invoice.setInvocesLines(lines);

        List<Payment> payments = new ArrayList();
        Payment payment = new Payment();
        //payment.setId(0);
        payment.setAmount(0.0);
        payments.add(payment);
        payment.setInvoice(invoice);
        invoice.setPayments(payments);

    }

    public void displayInvoice(Invoice in) throws PropertyVetoException {
        InvoiceDetailsView idv = new InvoiceDetailsView(in);
        idv.setVisible(true);
        this.getParent().add(idv);
        idv.setSelected(true);
        idv.toFront();
        idv.setFocusable(true);

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton_Refresh;
    private javax.swing.JButton jButton_Save_Prices;
    private javax.swing.JButton jButton_Validate;
    private javax.swing.JComboBox<String> jComboBox_Client;
    private javax.swing.JLabel jLabel_Address_City;
    private javax.swing.JLabel jLabel_Address_City_Value;
    private javax.swing.JLabel jLabel_Address_HouseNumber;
    private javax.swing.JLabel jLabel_Address_HouseNumber_Value;
    private javax.swing.JLabel jLabel_Address_PostCode;
    private javax.swing.JLabel jLabel_Address_PostCode_Value;
    private javax.swing.JLabel jLabel_Address_Street;
    private javax.swing.JLabel jLabel_Address_Street_Value;
    private javax.swing.JLabel jLabel_Amount;
    private javax.swing.JLabel jLabel_Amount_Value;
    private javax.swing.JLabel jLabel_Client_CompanyID;
    private javax.swing.JLabel jLabel_Client_CompanyID_Value;
    private javax.swing.JLabel jLabel_Client_CompanyName;
    private javax.swing.JLabel jLabel_Client_CompanyName_Value;
    private javax.swing.JLabel jLabel_Client_Email;
    private javax.swing.JLabel jLabel_Client_Email_Value;
    private javax.swing.JLabel jLabel_Client_Id;
    private javax.swing.JLabel jLabel_Client_Id_Value;
    private javax.swing.JLabel jLabel_Client_Name;
    private javax.swing.JLabel jLabel_Client_Name_Value;
    private javax.swing.JLabel jLabel_Client_PhoneNumber;
    private javax.swing.JLabel jLabel_Client_PhoneNumber_Value;
    private javax.swing.JLabel jLabel_Client_Status;
    private javax.swing.JLabel jLabel_Client_Status_Value;
    private javax.swing.JLabel jLabel_Client_Surname;
    private javax.swing.JLabel jLabel_Client_Surname_Value;
    private javax.swing.JLabel jLabel_Invoicing_Numberplate;
    private javax.swing.JLabel jLabel_Invoicing_Vehicle_Type;
    private javax.swing.JLabel jLabel_Search_Part;
    private javax.swing.JLabel jLabel_SelectionCount;
    private javax.swing.JLabel jLabel_SelectionCount_Value;
    private javax.swing.JPanel jPanel_Invoice_Lines;
    private javax.swing.JPanel jPanel_Invoicing_Client;
    private javax.swing.JPanel jPanel_Invoicing_Company;
    private javax.swing.JPanel jPanel_Invoicing_Search_Result;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField_Invoicing_Numberplate;
    private javax.swing.JTextField jTextField_Invoicing_Vehicle_Type;
    private javax.swing.JTextField jTextField_Search_Part;
    private javax.swing.JToggleButton jToggleButton_Auto;
    private fr.sysdev.softcpa.utils.Converter.PriceConvertor priceConvertor2;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    public void loadClients() {

        dlm = new DefaultListModel<>();

        jComboBox_Client.removeAllItems();
        jComboBox_Client.addItem(Constants.Messages.CHOOSE_CLIENT);
        jComboBox_Client.setSelectedIndex(0);

        clientsNamesList = clientsNamesList();
        clientsNamesList.forEach(
                (String c) -> {
                    jComboBox_Client.addItem(c);
                    dlm.addElement(c);
                });

        AutoCompleteDecorator.decorate(jComboBox_Client);

        String[] clientsArray = new String[clientsNamesList.size()];

        clientsArray = clientsNamesList.toArray(clientsArray);

    }

    private ArrayList<String> clientsNamesList() {
        ArrayList<String> cnl;
        cnl = new ArrayList<>();
        clients.forEach((Client c) -> {
            cnl.add(c.getName() + " " + c.getSurname());
        });
        return cnl;
    }

    private void prepareForm() {
//        ImageIcon img = new ImageIcon("E:\\Salah\\projects\\softcpa\\src\\main\\resources\\Icons\\invoicing.png");
//                this.setFrameIcon(img);
        jLabel_Client_Id.setText(Constants.Labels.CLIENT_ID);
        jLabel_Address_City.setText(Constants.Labels.CITY);
        jLabel_Address_HouseNumber.setText(Constants.Labels.HOUSE_NUMBER);
        jLabel_Address_PostCode.setText(Constants.Labels.POSTAL_CODE);
        jLabel_Client_Email.setText(Constants.Labels.EMAIL);
        jLabel_Client_Name.setText(Constants.Labels.NAME);
        jLabel_Client_PhoneNumber.setText(Constants.Labels.PHONE_NUMBER);
        jLabel_Client_Surname.setText(Constants.Labels.SURNAME);

        jLabel_Address_Street.setText(Constants.Labels.STREET);
        jLabel_Client_Status.setText(Constants.Labels.CLIENT_STATUS);
        jLabel_Client_CompanyName.setText(Constants.Labels.COMPANY_NAME);
        jLabel_Client_CompanyID.setText(Constants.Labels.COMPANY_ID);
        jLabel_Search_Part.setText(Constants.Labels.SEARCH);
        jButton_Refresh.setText(Constants.Labels.REFRESH_BTN);

        jButton_Validate.setText(Constants.Labels.VALIDATE);
        jButton_Save_Prices.setText(Constants.Labels.SAVE);

        jLabel_Amount.setText(Constants.Labels.AMOUNT);
        jLabel_SelectionCount.setText(Constants.Labels.SELECTION_COUNT);
        jLabel_Invoicing_Numberplate.setText(Constants.Labels.PLATENUMBER);
        jLabel_Invoicing_Vehicle_Type.setText(Constants.Labels.VEHICLE_TYPE);

        loadClients();

        hideClientPanel();
        hideCompanyPanel();
    }

    public List<Client> getClients() {
        return clients;
    }

    public void setClients(List<Client> clients) {
        this.clients = clients;
    }

    public Client getClient() {
        return client;
    }

    public void setClient(Client client) {
        this.client = client;
    }

    public List<Part> getParts() {
        return parts;
    }

    public void setParts(List<Part> parts) {
        this.parts = parts;
    }

    public Client getSeller() {
        return seller;
    }

    public void setSeller(Client seller) {
        this.seller = seller;
    }

    private void refresh() {
        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${client.id}"), jLabel_Client_Id_Value, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${client.name}"), jLabel_Client_Name_Value, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${client.surname}"), jLabel_Client_Surname_Value, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${client.company.name}"), jLabel_Client_CompanyName_Value, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${client.email}"), jLabel_Client_Email_Value, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${client.phoneNumber}"), jLabel_Client_PhoneNumber_Value, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${client.address.houseNumber}"), jLabel_Address_HouseNumber_Value, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${client.address.street}"), jLabel_Address_Street_Value, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${client.address.postCode}"), jLabel_Address_PostCode_Value, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${client.address.city}"), jLabel_Address_City_Value, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${client.company.cin}"), jLabel_Client_CompanyID_Value, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);
        bindingGroup.bind();
    }

    public void hideCompanyPanel() {
        jPanel_Invoicing_Company.setVisible(false);
    }

    public void showCompanyPanel() {
        jPanel_Invoicing_Company.setVisible(true);
    }

    public void hideClientPanel() {
        jPanel_Invoicing_Client.setVisible(false);
    }

    public void showClientPanel() {
        refresh();
        jPanel_Invoicing_Client.revalidate();
        jPanel_Invoicing_Client.repaint();
        jPanel_Invoicing_Client.setVisible(true);
    }

    public JButton getRefreshBtn() {

        return jButton_Refresh;
    }

    public JButton getValidateBtn() {
        return jButton_Validate;
    }

    public JToggleButton getAutoBtn() {
        return jToggleButton_Auto;
    }

    private void search() {

        ArrayList<InvoiceLine> searchResultsInvoicelines = new ArrayList<>();
        ArrayList<InvoiceLine> searchResultsProInvoicelines = new ArrayList<>();

        List<Part> filter = new ArrayList<>();
        String s = jTextField_Search_Part.getText().toUpperCase().trim();
        if (!"".equals(s)) {
            if (this.MOD == MANUAL) {

                filter = PartsPredicates.filterParts(parts, PartsPredicates.refOrEanCodeEquals(s));
            } else {
                filter = PartsPredicates.filterParts(parts, PartsPredicates.eanCodeEquals(s));

            }

            searchResultsInvoicelines = createDefaultInvoiceLines(filter);
            searchResultsProInvoicelines = createProInvoiceLines(filter);

            redrawSearchResultPanel(searchResultsInvoicelines, searchResultsProInvoicelines);

            Optional<Part> OFPart = filter.stream().findFirst();
            if (OFPart.isPresent()) {
                if (this.MOD == AUTO) {
                    Part part = OFPart.get();
                    JPanel panel = new JPanel();
                    for (java.awt.Component cmp : jPanel_Invoicing_Search_Result.getComponents()) {

                        if (cmp.getName().equals("panel" + part.getReference())) {

                            panel = (JPanel) cmp;
                            JPanel pan = new JPanel();

                            for (java.awt.Component cmp1 : panel.getComponents()) {

                                if (cmp1.getName().equals("panel" + part.getReference())) {
                                    if (cmp1 instanceof JPanel) {
                                        pan = (JPanel) cmp1;
                                        for (java.awt.Component cmp2 : pan.getComponents()) {

                                            if (cmp2 instanceof JButton) {
                                                ((JButton) cmp2).doClick();
                                            }
                                        }
                                    }
                                }
                            }

                        }
                    }
                }
            }
        }
    }

    public void redrawSearchResultPanel(ArrayList<InvoiceLine> searchResultsInvoicelines, ArrayList<InvoiceLine> searchResultsProInvoicelines) {
        jPanel_Invoicing_Search_Result.removeAll();
        if (searchResultsInvoicelines.size() > 0) {
            jPanel_Invoicing_Search_Result.add(createHeadersPanel());
            final ArrayList<InvoiceLine> srp = searchResultsProInvoicelines;
            searchResultsInvoicelines.forEach((InvoiceLine l) -> {
                JPanel p = createResultPanel(l, srp);
                if (jPanel_Invoicing_Search_Result.getComponentCount() % 2 == 0) {
                    p.setBackground(UIManager.getColor("Panel.background").brighter());
                } else {
                    p.setBackground(UIManager.getColor("Panel.background"));
                }
                jPanel_Invoicing_Search_Result.add(p);

            });

            jPanel_Invoicing_Search_Result.setVisible(true);
            jPanel_Invoicing_Search_Result.revalidate();
            jPanel_Invoicing_Search_Result.repaint();
        } else {

            jPanel_Invoicing_Search_Result.removeAll();
            jPanel_Invoicing_Search_Result.revalidate();
            jPanel_Invoicing_Search_Result.repaint();

        }
    }

    public JPanel createResultPanel(InvoiceLine il, ArrayList<InvoiceLine> pils) {

        JPanel panel;

        JLabel label;
        JButton addBtn;
        JTextField jtp;
        JTextField jpub;
        JTextField jtpp;
        Border border = BorderFactory.createLineBorder(Color.BLUE, 1);
        panel = new JPanel();
        panel.setName("panel" + il.getReference());

        GridBagLayout gbl = new GridBagLayout();
        panel.setLayout(gbl);
        GridBagConstraints gdbc = new GridBagConstraints();

        int x = 0;
        int y = 0;
        int w = 1;

        label = new JLabel(il.getReference());
        label.setName("labelReference" + il.getId());
        label.setPreferredSize(new Dimension(35, 20));
        label.setMinimumSize(new Dimension(35, 20));
        label.setMaximumSize(new Dimension(35, 20));

        gdbc.gridx = x;
        gdbc.gridy = y;
        gdbc.gridwidth = w;
        gdbc.ipadx = 100;
        gdbc.insets = new Insets(0, 20, 0, 5);
        panel.add(label, gdbc);

        label = new JLabel(il.getDescription());
        label.setName("labelDescription" + il.getId());

        label.setPreferredSize(new Dimension(50, 20));
        label.setMinimumSize(new Dimension(50, 20));
        label.setMaximumSize(new Dimension(50, 20));

        x = x + w;
        gdbc.gridx = x;
        gdbc.gridy = y;
        gdbc.ipadx = 350;
        gdbc.insets = new Insets(0, 0, 0, 5);
        panel.add(label, gdbc);
        w = 3;

        label = new JLabel(il.getProvider());
        label.setName("labelProviderName" + il.getProvider());

        label.setPreferredSize(new Dimension(50, 20));
        label.setMinimumSize(new Dimension(50, 20));
        label.setMaximumSize(new Dimension(50, 20));

        x = x + w;
        gdbc.gridx = x;
        gdbc.gridy = y;
        gdbc.gridwidth = w;
        gdbc.ipadx = 30;

        panel.add(label, gdbc);

        jtp = new JTextField("" + il.getPurchasingPrice());
        jtp.setName("jTFPurchasingPrice" + il.getReference());
        addKeyListnerToSaving(jtp);

        jtp.setPreferredSize(new Dimension(30, 20));
        jtp.setMinimumSize(new Dimension(30, 20));
        jtp.setMaximumSize(new Dimension(30, 20));

        x = x + w;
        gdbc.gridx = x;
        gdbc.gridy = y;
        gdbc.gridwidth = w;
        gdbc.ipadx = 30;

        panel.add(jtp, gdbc);

        //  if (client == null || client.getClientStatus() != ClientStatusEnum.INDIVIDUAL) {
        Stream<InvoiceLine> is = pils.stream().filter(pil -> pil.getReference().equals(il.getReference()));

        List<InvoiceLine> temp = is.collect(Collectors.toCollection(ArrayList::new));

        Optional<InvoiceLine> oPil = temp.stream().findFirst();

        InvoiceLine pil = new InvoiceLine();
        if (oPil.isPresent()) {
            pil = oPil.get();
        }

        jpub = new JTextField("" + il.getSellingPrice());
        jpub.setName("jTFSellingPrice" + il.getReference());
        addKeyListnerToSaving(jpub);

        jpub.setPreferredSize(new Dimension(30, 20));
        jpub.setMinimumSize(new Dimension(30, 20));
        jpub.setMaximumSize(new Dimension(30, 20));

        x = x + w;
        gdbc.gridx = x;
        gdbc.gridy = y;
        gdbc.gridwidth = w;
        gdbc.ipadx = 30;

        panel.add(jpub, gdbc);
        // } else {

        jtpp = new JTextField("" + pil.getSellingPrice());
        jtpp.setName("jTFProSellingPrice" + il.getReference());
        addKeyListnerToSaving(jtpp);
//            label = new JLabel(il.getPart().getProfessionalSellingPrice() + "");
        // }
        jtpp.setPreferredSize(new Dimension(30, 20));
        jtpp.setMinimumSize(new Dimension(30, 20));
        jtpp.setMaximumSize(new Dimension(30, 20));

        x = x + w;
        gdbc.gridx = x;
        gdbc.gridy = y;
        gdbc.ipadx = 30;
        gdbc.gridwidth = w;

        panel.add(jtpp, gdbc);

        addBtn = new JButton("[ + ]");
        addBtn.setName("add" + il.getId());
        final JTextField qt = new JTextField("" + il.getQuantity(), 5);
        addBtn.addActionListener((ActionEvent ae) -> {

            il.setQuantity(Integer.parseInt(qt.getText()));
            jPanel_Invoicing_Search_Result.removeAll();
            jPanel_Invoicing_Search_Result.revalidate();
            jPanel_Invoicing_Search_Result.repaint();

            List<Part> filter = PartsPredicates.filterParts(parts, PartsPredicates.refEquals(il.getReference()));
            Stream<InvoiceLine> ils = selectedInvoiceLines.stream().filter(p -> p.getReference().equals(il.getReference()));
            List<InvoiceLine> list = ils.collect(Collectors.toCollection(ArrayList::new));

            Optional<InvoiceLine> findFirst = list.stream().findFirst();

            if (findFirst.isPresent()) {
                int index = selectedInvoiceLines.indexOf(findFirst.get());
                int quantity2 = findFirst.get().getQuantity();
                int quantity = il.getQuantity();
                quantity = quantity + quantity2;
                selectedInvoiceLines.get(index).setQuantity(quantity);

            } else {
                if (client != null && !client.getClientStatus().equals(ClientStatusEnum.INDIVIDUAL)) {
                    Double pp = priceConvertor2.convertForward(jtpp.getText());
                    il.setSellingPrice(pp);
                } else {
                    Double pub = priceConvertor2.convertForward(jpub.getText());
                    il.setSellingPrice(pub);
                }
                selectedInvoiceLines.add(il);
            }

            redrawSelectedInvoiceLinesPanel();

            updateDisplayResume();
            
            jPanel_Invoice_Lines.setVisible(true);
            jPanel_Invoice_Lines.revalidate();
            jPanel_Invoice_Lines.repaint();

            jTextField_Search_Part.setText("");
        });

        JPanel pan = new JPanel();

        pan.add(addBtn);
        pan.add(qt);

        x = x + w;
        gdbc.gridx = x;
        gdbc.gridy = y;

        w = 3;
        gdbc.gridwidth = w;
        gdbc.ipadx = 100;

        pan.setName("pan" + il.getReference());
        pan.setPreferredSize(new Dimension(32, 40));
        pan.setMinimumSize(new Dimension(32, 40));
        pan.setMaximumSize(new Dimension(32, 40));
        pan.setBorder(new MatteBorder(0,
                0,
                1,
                0,
                UIManager.getColor("Panel.background").darker()));

        panel.add(pan, gdbc);

        panel.setPreferredSize(new Dimension(500, 40));
        panel.setBorder(new MatteBorder(0,
                0,
                1,
                0,
                UIManager.getColor("Panel.background").darker()));
        pan.setName("panel" + il.getReference());

        return panel;
    }

    public void addKeyListnerToSaving(JTextField jtf) {
        jtf.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.isControlDown() && e.getKeyCode() == KeyEvent.VK_S) {
                    //saving in db
                    //find part and add it to the liste to save 
                    JOptionPane.showMessageDialog(null,
                        jtf.getName());
                    addToSavingList(jtf);

                }
            }

        });
    }

    public void addToSavingList(JTextField jtf) {
        Part part = new Part();
        JPanel panel = new JPanel();
        Stream<Part> selectedPartsStream = parts.stream().filter(p -> jtf.getName().endsWith(p.getReference()));
        Optional<Part> OFPart = selectedPartsStream.findFirst();
        if (OFPart.isPresent()) {
            part = OFPart.get();
            JOptionPane.showMessageDialog(null,
                    jtf.getName());
            if (jtf.getName().startsWith("jTFProSellingPrice")) {
                part.setProfessionalSellingPrice(priceConvertor2.convertForward(jtf.getText()));
            } else if (jtf.getName().startsWith("jTFPurchasingPrice")) {
                part.setPurchasingPrice(priceConvertor2.convertForward(jtf.getText()));

                //check if the part exists 
                // change the price on part 
            } else {
                part.setSellingPrice(priceConvertor2.convertForward(jtf.getText()));
                
            }

            JOptionPane.showMessageDialog(null,
                    part.getReference()
                    + " \n" + part.getPurchasingPrice()
                    + " \n" + part.getProfessionalSellingPrice()
                    + " \n" + part.getSellingPrice());

            partsToSave.add(part);
        }
        //partsToSave.addAll(selectedPartsStream.collect(Collectors.toCollection(ArrayList::new)) );
        // JOptionPane.showMessageDialog(null, partsToSave);
    }

    public void redrawSelectedInvoiceLinesPanel() {
        jPanel_Invoice_Lines.removeAll();
        if (!selectedInvoiceLines.isEmpty()) {
            jPanel_Invoice_Lines.add(createHeadersSelectedPanel());
        }
        selectedInvoiceLines.forEach(l -> {
            JPanel selectedPanel = createSelectedPanel(l);
            jPanel_Invoice_Lines.add(selectedPanel);
        });
    }

    public double amount(Double taxeRate) {
        if (client == null || client.getClientStatus() == ClientStatusEnum.INDIVIDUAL) {

            double total = selectedInvoiceLines.stream().mapToDouble(i -> i.getQuantity() * i.getSellingPrice()).sum();

            return total + (total * taxeRate) / 100;
        } else {
            double total = selectedInvoiceLines.stream().mapToDouble(i -> i.getQuantity() * i.getSellingPrice()).sum();

            return total + (total * taxeRate) / 100;
        }
    }

    public JPanel createHeadersSelectedPanel() {
        JPanel panel;
        JLabel label;

        Border border = BorderFactory.createLineBorder(Color.BLUE, 0);

        panel = new JPanel();
        GridBagLayout gbl = new GridBagLayout();
        panel.setLayout(gbl);
        GridBagConstraints gdbc = new GridBagConstraints();
        int x = 0;
        int y = 0;
        int w = 1;
        label = new JLabel(Constants.Labels.HEADER_REF);

        label.setName("labelHeaderReference");
        gdbc.gridx = x;
        gdbc.gridy = y;
        gdbc.gridwidth = w;
        gdbc.ipadx = 40;
        gdbc.insets = new Insets(0, 0, 0, 12);

        panel.add(label, gdbc);
        label = new JLabel(Constants.Labels.DESCRIPTION);
        label.setName("labelHeaderDesignation");
        x = x + w;
        gdbc.gridx = x;
        gdbc.gridy = y;
        w = 3;
        gdbc.ipadx = 350;
        x = x + w;
        gdbc.gridx = x;
        gdbc.gridy = y;
        gdbc.gridwidth = w;

        label.setPreferredSize(new Dimension(50, 20));
        label.setMinimumSize(new Dimension(50, 20));
        label.setMaximumSize(new Dimension(50, 20));
        panel.add(label, gdbc);
        label = new JLabel(Constants.Labels.PUR_PRICE, SwingConstants.CENTER);
        label.setName("labelHeaderPurchasingPrice");
        x = x + w;
        gdbc.gridx = x;
        gdbc.gridy = y;
        gdbc.gridwidth = w;
        gdbc.ipadx = 30;

        //
        panel.add(label, gdbc);

//            label = new JLabel("   ", SwingConstants.CENTER);
//            label.setName("space");
//            
//          
//             x = x + w;
//            gdbc.gridx = x;
//            gdbc.gridy = y;
//            gdbc.gridwidth = w;
//            gdbc.ipadx = 30;
//            panel.add(label, gdbc);
        if (client == null || client.getClientStatus() == ClientStatusEnum.INDIVIDUAL) {

            label = new JLabel(Constants.Labels.SELLING_PRICE, SwingConstants.CENTER);
            label.setName("labelHeaderSellingPrice");

        } else {

            panel.add(label, gdbc);
            label = new JLabel(Constants.Labels.PRO_SELLING_PRICE, SwingConstants.CENTER);
            label.setName("labelHeaderProSellingPrice");
        }

        x = x + w;
        gdbc.gridx = x;
        gdbc.gridy = y;
        gdbc.gridwidth = w;
        gdbc.ipadx = 30;

        panel.add(label, gdbc);

        label = new JLabel(Constants.Labels.QUANTITY);
        label.setName("labelHeaderQuantity");

        JPanel pan = new JPanel();

        pan.add(label);

        x = x + w;
        gdbc.gridx = x;
        gdbc.gridy = y;
        w = 3;
        gdbc.gridwidth = w;
        panel.add(pan, gdbc);
        panel.setPreferredSize(new Dimension(500, 40));
        panel.setBorder(new MatteBorder(0, 0, 1, 0, Color.green));
        panel.setName("headerSelectedPanel");

        return panel;
    }

    public JPanel createSelectedPanel(InvoiceLine il) {
        JPanel panel;
        JLabel label;
        JButton removeBtn;
        JTextField jtp;
        Border border = BorderFactory.createLineBorder(Color.BLUE, 0);

        panel = new JPanel();
        GridBagLayout gbl = new GridBagLayout();
        panel.setLayout(gbl);
        GridBagConstraints gdbc = new GridBagConstraints();
        int x = 0;
        int y = 0;
        int w = 1;
        label = new JLabel(il.getReference());

        label.setName("labelReference" + il.getId());
        gdbc.gridx = x;
        gdbc.gridy = y;
        gdbc.gridwidth = w;
        gdbc.ipadx = 40;
        gdbc.insets = new Insets(0, 0, 0, 12);

        panel.add(label, gdbc);
        label = new JLabel(il.getDescription());
        label.setName("labelDesignation" + il.getId());
        x = x + w;
        gdbc.gridx = x;
        gdbc.gridy = y;
        w = 3;
        gdbc.ipadx = 350;
        x = x + w;
        gdbc.gridx = x;
        gdbc.gridy = y;
        gdbc.gridwidth = w;

        label.setPreferredSize(new Dimension(50, 20));
        label.setMinimumSize(new Dimension(50, 20));
        label.setMaximumSize(new Dimension(50, 20));
        panel.add(label, gdbc);
        label = new JLabel(il.getPurchasingPrice() + "");
        jtp = new JTextField("" + il.getPurchasingPrice(), 5);
        jtp.setName("jTFPurchasingPrice" + il.getReference());
        x = x + w;
        gdbc.gridx = x;
        gdbc.gridy = y;
        gdbc.gridwidth = w;
        gdbc.ipadx = 30;

        //
        panel.add(jtp, gdbc);

        
      final JTextField jtpp = new JTextField("" + il.getSellingPrice(), 5);
        jtpp.setName("jTFSellingPrice" + il.getReference());
        jtpp.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                int code = e.getKeyCode();
                int modifiers = e.getModifiers();
                if (code == e.VK_CONTROL) {

                } else {
                    il.setSellingPrice(priceConvertor2.convertForward(jtpp.getText()));

                    updateDisplayResume() ;
                }
            }

        });

        x = x + w;
        gdbc.gridx = x;
        gdbc.gridy = y;
        gdbc.gridwidth = w;
        gdbc.ipadx = 30;

        panel.add(jtpp, gdbc);
        removeBtn = new JButton("[ - ]");
        removeBtn.setName("remove" + il.getId());
        // final JPanel p = panel;
        final JTextField qt = new JTextField("" + il.getQuantity(), 5);
        qt.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
             int code = e.getKeyCode();
        int modifiers = e.getModifiers();
        if (code == KeyEvent.VK_CONTROL) {

        } else {
            il.setQuantity((priceConvertor2.convertForward(qt.getText()).intValue()));
            updateDisplayResume();
        }
            }

            });
        
        removeBtn.addActionListener((ActionEvent ae) -> {

            selectedInvoiceLines.remove(il);

            updateDisplayResume();

            jPanel_Invoice_Lines.remove(panel);
            jPanel_Invoice_Lines.revalidate();
            jPanel_Invoice_Lines.repaint();

        });
        JPanel pan = new JPanel();
        pan.add(removeBtn, BorderLayout.LINE_START);
        pan.add(qt);

        x = x + w;
        gdbc.gridx = x;
        gdbc.gridy = y;
        w = 3;
        gdbc.gridwidth = w;
        panel.add(pan, gdbc);
        panel.setPreferredSize(new Dimension(500, 40));
        panel.setBorder(new MatteBorder(0, 0, 1, 0, Color.green));
        panel.setName("panel" + il.getId());

        return panel;
    }

    public void updateDisplayResume() {
        jLabel_SelectionCount_Value.setText(selectedInvoiceLines.size() + "");
        jLabel_Amount_Value.setText(amount(20.0) + " €");
    }

    public void loadParts() {
        createDefaultInvoiceLines(parts);
        if (!"".equals(jTextField_Search_Part.getText())) {
            search();
        }
        System.out.println("Maj des parts");

    }

    public ArrayList<InvoiceLine> createDefaultInvoiceLines(List<Part> parts) {

        ArrayList ils = new ArrayList();
        parts.forEach(p -> {
            InvoiceLine il = new InvoiceLine();
            String d = p.getDesignation() + " " + p.getBrand();

            il.setDescription(d);
            il.setReference(p.getReference());
            il.setProvider(p.getProvider().getName());
            il.setQuantity(1);
            il.setPurchasingPrice(p.getPurchasingPrice());
            il.setSellingPrice(p.getSellingPrice());
            ils.add(il);
        });
        return ils;
    }

    public ArrayList<InvoiceLine> createProInvoiceLines(List<Part> parts) {

        ArrayList ils = new ArrayList();
        parts.forEach(p -> {
            InvoiceLine il = new InvoiceLine();
            String d = p.getDesignation() + " " + p.getBrand();

            il.setDescription(d);
            il.setReference(p.getReference());
            il.setProvider(p.getProvider().getName());
            il.setQuantity(1);
            il.setPurchasingPrice(p.getPurchasingPrice());
            il.setSellingPrice(p.getProfessionalSellingPrice());
            ils.add(il);
        });
        return ils;
    }

    public List<InvoiceLine> getSelectedInvoiceLines() {
        return selectedInvoiceLines;
    }

    public void setSelectedInvoiceLines(List<InvoiceLine> selectedInvoiceLines) {
        this.selectedInvoiceLines = selectedInvoiceLines;
    }

    public JPanel createHeadersPanel() {

        JPanel panel;
        JLabel label;

        Border border = BorderFactory.createLineBorder(Color.BLUE, 1);
        panel = new JPanel();
        GridBagLayout gbl = new GridBagLayout();
        panel.setLayout(gbl);
        GridBagConstraints gdbc = new GridBagConstraints();

        int x = 0;
        int y = 0;
        int w = 1;

        label = new JLabel(Constants.Labels.HEADER_REF);
        label.setName("labelHeaderReference");
        label.setPreferredSize(new Dimension(35, 20));
        label.setMinimumSize(new Dimension(35, 20));
        label.setMaximumSize(new Dimension(35, 20));

        gdbc.gridx = x;
        gdbc.gridy = y;
        gdbc.gridwidth = w;
        gdbc.ipadx = 100;
        gdbc.insets = new Insets(0, 20, 0, 5);
        panel.add(label, gdbc);

        label = new JLabel(Constants.Labels.DESCRIPTION);
        label.setName("labelHeaderDescription");

        label.setPreferredSize(new Dimension(50, 20));
        label.setMinimumSize(new Dimension(50, 20));
        label.setMaximumSize(new Dimension(50, 20));

        x = x + w;
        gdbc.gridx = x;
        gdbc.gridy = y;
        gdbc.ipadx = 350;
        gdbc.insets = new Insets(0, 0, 0, 5);
        panel.add(label, gdbc);
        w = 3;

        label = new JLabel(Constants.Labels.PROVIDER);
        label.setName("labelHeaderProviderName");

        label.setPreferredSize(new Dimension(50, 20));
        label.setMinimumSize(new Dimension(50, 20));
        label.setMaximumSize(new Dimension(50, 20));

        x = x + w;
        gdbc.gridx = x;
        gdbc.gridy = y;
        gdbc.gridwidth = w;
        gdbc.ipadx = 30;

        panel.add(label, gdbc);

        label = new JLabel(Constants.Labels.PUR_PRICE_HEADER, SwingConstants.CENTER);
        label.setName("labelHeaderPurchasingPrice");
        label.setPreferredSize(new Dimension(30, 20));
        label.setMinimumSize(new Dimension(30, 20));
        label.setMaximumSize(new Dimension(30, 20));

        x = x + w;
        gdbc.gridx = x;
        gdbc.gridy = y;
        gdbc.gridwidth = w;
        gdbc.ipadx = 30;

        panel.add(label, gdbc);

        label = new JLabel(Constants.Labels.SELLING_PRICE_HEADER, SwingConstants.CENTER);
        label.setName("labelHeaderSellingPrice");
        label.setPreferredSize(new Dimension(30, 20));
        label.setMinimumSize(new Dimension(30, 20));
        label.setMaximumSize(new Dimension(30, 20));

        x = x + w;
        gdbc.gridx = x;
        gdbc.gridy = y;
        gdbc.gridwidth = w;
        gdbc.ipadx = 30;

        panel.add(label, gdbc);

        label = new JLabel(Constants.Labels.PRO_SELLING_PRICE_HEADER, SwingConstants.CENTER);
        label.setName("labelHeaderProSellingPrice");
        label.setPreferredSize(new Dimension(30, 20));
        label.setMinimumSize(new Dimension(30, 20));
        label.setMaximumSize(new Dimension(30, 20));

        x = x + w;
        gdbc.gridx = x;
        gdbc.gridy = y;
        gdbc.gridwidth = w;
        gdbc.ipadx = 30;

        panel.add(label, gdbc);

        JPanel pan = new JPanel();
        label = new JLabel(Constants.Labels.QUANTITY, SwingConstants.CENTER);
        label.setName("labelHeaderQuantity");
        pan.add(label);

        x = x + w;
        gdbc.gridx = x;
        gdbc.gridy = y;
        w = 3;
        gdbc.gridwidth = w;
        gdbc.ipadx = 100;

        label.setPreferredSize(new Dimension(40, 40));
        label.setMinimumSize(new Dimension(40, 40));
        label.setMaximumSize(new Dimension(40, 40));

        panel.add(label, gdbc);

        panel.setPreferredSize(new Dimension(500, 40));
        panel.setBorder(new MatteBorder(0,
                0,
                1,
                0,
                UIManager.getColor("Panel.background").darker()));

        panel.setName("panelHeader");

        return panel;
    }

    public JPanel createHeadersPanel1() {

        JPanel panel;
        JLabel label;

        Border border = BorderFactory.createLineBorder(Color.BLUE, 1);
        panel = new JPanel();
        GridBagLayout gbl = new GridBagLayout();
        panel.setLayout(gbl);
        GridBagConstraints gdbc = new GridBagConstraints();
        int x = 0;
        int y = 0;
        int w = 1;
        label = new JLabel(Constants.Labels.REF);

        label.setName("labelHeaderReference");
        gdbc.gridx = x;
        gdbc.gridy = y;
        gdbc.gridwidth = w;
        gdbc.ipadx = 40;
        gdbc.insets = new Insets(0, 0, 0, 12);

        panel.add(label, gdbc);
        label = new JLabel(Constants.Labels.DESCRIPTION);
        label.setName("labelHeaderDescription");
        x = x + w;
        gdbc.gridx = x;
        gdbc.gridy = y;
        w = 3;
        gdbc.ipadx = 350;

        label.setPreferredSize(new Dimension(50, 20));
        label.setMinimumSize(new Dimension(50, 20));
        label.setMaximumSize(new Dimension(50, 20));
        panel.add(label, gdbc);
        label = new JLabel(Constants.Labels.PROVIDER);
        label.setName("labelHeaderProviderName");
        x = x + w;
        gdbc.gridx = x;
        gdbc.gridy = y;
        gdbc.gridwidth = w;
        gdbc.ipadx = 40;

        label.setPreferredSize(new Dimension(50, 20));
        label.setMinimumSize(new Dimension(50, 20));
        label.setMaximumSize(new Dimension(50, 20));
        panel.add(label, gdbc);
        label = new JLabel(Constants.Labels.PUR_PRICE_HEADER);
        label.setName("labelHeaderPurchasingPrice");
        x = x + w;
        gdbc.gridx = x;
        gdbc.gridy = y;
        gdbc.gridwidth = w;
        gdbc.ipadx = 30;
        label.setPreferredSize(new Dimension(30, 20));
        label.setMinimumSize(new Dimension(30, 20));
        label.setMaximumSize(new Dimension(30, 20));

        panel.add(label, gdbc);

        if (client == null || client.getClientStatus() != ClientStatusEnum.INDIVIDUAL) {
            label = new JLabel(Constants.Labels.SELLING_PRICE_HEADER);
            label.setName("labelHeaderSellingPrice");
        } else {
            label = new JLabel(Constants.Labels.PRO_SELLING_PRICE_HEADER);
            label.setName("labelHeaderProSellingPrice");
        }

        x = x + w;
        gdbc.gridx = x;
        gdbc.gridy = y;
        gdbc.gridwidth = w;
        gdbc.ipadx = 30;
        label.setPreferredSize(new Dimension(30, 20));
        label.setMinimumSize(new Dimension(30, 20));
        label.setMaximumSize(new Dimension(30, 20));

        panel.add(label, gdbc);

        JPanel pan = new JPanel();
        label = new JLabel(Constants.Labels.QUANTITY);
        label.setName("labelHeaderQuantity");
        pan.add(label);

        x = x + w;
        gdbc.gridx = x;
        gdbc.gridy = y;
        w = 3;
        gdbc.gridwidth = w;
        gdbc.ipadx = 150;
        panel.add(pan, gdbc);
        panel.setPreferredSize(new Dimension(500, 40));
        panel.setBorder(new MatteBorder(0,
                0,
                1,
                0,
                Color.red));

        panel.setName("panelHeader");

        return panel;
    }

    public Invoice getInvoice() {
        return invoice;
    }

    public void setInvoice(Invoice invoice) {
        this.invoice = invoice;
    }

    public long getInvoiceKey() {
        return invoiceKey;
    }

    public void setInvoiceKey(long invoiceKey) {
        this.invoiceKey = invoiceKey;
    }

    public void addInvoice(Long key) {
        invoiceKey = key;
        createInvoice();
    }

    public int getChoice() {
        return choice;
    }

    public void setChoice(int choice) {
        this.choice = choice;
    }

    public void updateInvoiceSelectedLinesPrices(List<InvoiceLine> ils, JPanel panel) {

        ils.forEach((InvoiceLine il) -> {

            for (java.awt.Component p : jPanel_Invoice_Lines.getComponents()) {
                if (p instanceof JPanel) {
                    for (java.awt.Component c : ((JPanel) p).getComponents()) {

                        if (c instanceof JTextField && ((JTextField) c).getName().equals("jTFPurchasingPrice" + il.getReference())) {
                            final JTextField jtf = (JTextField) c;
                            il.setPurchasingPrice(priceConvertor2.convertForward(jtf.getText()));
                        }

                        if (c instanceof JTextField && ((JTextField) c).getName().equals("jTFSellingPrice" + il.getReference())) {
                            final JTextField jtf = (JTextField) c;
                            il.setSellingPrice(priceConvertor2.convertForward(jtf.getText()));
                        }

                    }

                }

            }
        });

    }

    private boolean isValidform() {
        return isSelectedClient() && isSelectedInvoiceLines();

    }

    private boolean isSelectedClient() {

        return client != null;
    }

    private boolean isSelectedInvoiceLines() {

        return !selectedInvoiceLines.isEmpty();
    }

    public void resetView() {
        prepareForm();
        jTextField_Invoicing_Numberplate.setText("");
        jTextField_Invoicing_Vehicle_Type.setText("");
        jTextField_Search_Part.setText("");

        jPanel_Invoice_Lines.removeAll();
        jPanel_Invoice_Lines.invalidate();
        jPanel_Invoice_Lines.repaint();

        jPanel_Invoicing_Search_Result.removeAll();
        jPanel_Invoicing_Search_Result.invalidate();
        jPanel_Invoicing_Search_Result.repaint();

        selectedInvoiceLines.clear();

    }

    public JPanel createSpacerPanel() {
        JPanel panel = new JPanel();

        panel.setBackground(UIManager.getColor("Panel.background").darker());
        panel.setBorder(new MatteBorder(0,
                0,
                10,
                0,
                UIManager.getColor("Panel.background").darker()));
        return panel;
    }

    public void loadMod() {
        if (jToggleButton_Auto.isSelected()) {
            this.MOD = AUTO;

        } else {
            this.MOD = MANUAL;
        }

        jPanel_Invoicing_Search_Result.removeAll();
        jPanel_Invoicing_Search_Result.revalidate();
        jPanel_Invoicing_Search_Result.repaint();
        jTextField_Search_Part.requestFocus();

        if (!"".equals(jTextField_Search_Part.getText())) {
            search();
        }

    }

    private boolean clientStatusHasChanged() {
        return (client.getClientStatus() != clientStatus);

    }

    private void updateInvoiceSelectedLines(ClientStatusEnum clientStatus) {

        List<Part> selectedParts = new ArrayList();

        for (InvoiceLine il : selectedInvoiceLines) {
            Stream<Part> selectedPartsStream = parts.stream().filter(p -> p.getReference().equals(il.getReference()));
            selectedParts = selectedPartsStream.collect(Collectors.toCollection(ArrayList::new));

        }
        if (clientStatus == null || client.getClientStatus() == ClientStatusEnum.INDIVIDUAL) {
            for (Part part : selectedParts) {
                selectedInvoiceLines.stream().filter((InvoiceLine il) -> {
                    return part.getReference().equals(il.getReference());
                }).forEachOrdered((il) -> {
                    il.setSellingPrice(part.getSellingPrice());
                });
            }
        } else {
            for (Part part : selectedParts) {
                selectedInvoiceLines.stream().filter((InvoiceLine il) -> {
                    return part.getReference().equals(il.getReference());
                }).forEachOrdered((il) -> {
                    il.setSellingPrice(part.getProfessionalSellingPrice());
                });
            }
        }
    }

    public List<Part> getPartsToSave() {
        return partsToSave;
    }

    public void setPartsToSave(List<Part> partsToSave) {
        this.partsToSave = partsToSave;
    }

    public JButton getSavePricesBtn() {
        return jButton_Save_Prices;
    }

}
